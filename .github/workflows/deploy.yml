# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# A job to build and verify the application
jobs:
  build-and-verify:
    # The runner (virtual machine) where the job will execute
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        # Downloads the repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        # Configures the Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Ensure this matches your environment

      - name: Install Dependencies & Pytest
        # Installs packages from requirements.txt and the testing framework
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verify Pre-Trained ML Model Exists
        # Critical step: checks for the trained model file
        run: |
          echo "Verifying core files..."
          # Check for the trained model in the correct path
          if [ ! -f models/models/model_breast_cancer.pkl ]; then 
            echo "Error: models/models/model_breast_cancer.pkl (ML model) is missing! Ensure you run 'python breast_cancer_app.py' and commit the model."
            exit 1
          fi
          # Check for the main Flask script
          if [ ! -f server.py ]; then 
            echo "Error: server.py (Flask app) is missing!"
            exit 1
          fi

  # Job para Despliegue Continuo (CD) en GitHub Pages
  deploy:
    # Solo se ejecuta si el job 'build-and-verify' (CI) pasa
    needs: build-and-verify 
     
    environment:
      # Asigna el job al ambiente de 'github-pages'
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        # Configura las p√°ginas de GitHub
        uses: actions/configure-pages@v5
        
      - name: Prepare Static Artifact
        # Crea la estructura de directorio que GitHub Pages espera.
        # En este caso, copia la plantilla HTML y la carpeta static/ a 'site'.
        run: |
          mkdir site
          cp templates/index.html site/
          cp -r static site/

      - name: Upload artifact
        # Sube el directorio 'site' como el artefacto de despliegue
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'

      - name: Deploy to GitHub Pages
        # Activa el despliegue final
        id: deployment
        uses: actions/deploy-pages@v4
